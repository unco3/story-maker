# -*- coding: utf-8 -*-
#
# prompts.py
#
# このファイルでは、APIを介してストーリー生成のためのプロンプトを構築するための関数群を定義しています。
# 登場人物プロフィール生成、職業制約、名前制約、舞台設定、シナリオ構成、アウトライン生成など、
# 要求されるJSON形式の回答を促すためのプロンプトを提供します。
#
# 【編集ガイド】
# - 各定数・関数は関連するロジックごとにまとめています。
# - プロンプト定義部分は、条件変更時に特定関数内を修正するだけで済むようにまとめています。
# - 文字列フォーマットにはf文字列を用いて可読性を向上させています。
# - 日本語コメントを付加して、どのようなルールや意図でプロンプトを作っているか明確にしました。
#
# 【注意点】
# - 既存機能(戻り値やJSON形式など)は絶対に変更しないでください。
# - 呼び出し元で利用している関数名や戻り値の形式は維持してください。
# - 修正する際は、他ファイルへの影響範囲を考慮してください。
# - ロジックは維持し、あくまで可読性、保守性を向上させるための整理・コメント追加に留めます。
#

# -----------------------------
# 禁止・許可名・職業の設定用定数
# -----------------------------
# 禁止される名字、名前と特別ルールの定義
FORBIDDEN_NAMES = {
    'family_names': ['佐々木', '鈴木', '田中', '佐藤', '月島', '雨宮'],
    'given_names': ['健太', '雫'],
    'other_rules': [
        'ありきたりな名前は避け、幅広く珍しい名前も採用する',
        '氏名は漢字とひらがなの読みを必ず記入します'
    ]
}

# 職業制約として使用する設定
JOBS = {
    'allowed_jobs': [
    "ヨガインストラクター""秘境ツアープランナー""アニメーター","アプリ開発者","イベントプランナー","インフルエンサー","エシカルブランドオーナー","オーガニック農業経営者","カウンターテロ専門家","カメラマン","ゲームストリーマー","ゲームデザイナー","コンサルタント","サイバーセキュリティアナリスト","サービス業従事者","システム管理者","ストリートパフォーマー","スポーツトレーナー","スポーツ選手","ソフトウェアアーキテクト","ソムリエ","デザイナー","デジタルアーティスト","データサイエンティスト","データベース管理者","ドローン操縦士","ネットワークエンジニア","バックエンドエンジニア","バリスタ","パイロット","パティシエ","ファッションバイヤー","フィットネスインストラクター","フロントエンドエンジニア","ブロックチェーンエンジニア","プラントエンジニア","プロゲーマー","プロジェクトマネージャー","ボランティア活動家","マーケター","ミュージシャン","ライター","ロボット技術者","不動産業者","介護士","会計士","作曲家","俳優","健康科学者","公務員","動物トレーナー","動物園飼育員","動物行動学者","医師","占い師","受付","古物商","営業職","地質学者","声優","外交官","宇宙飛行士","宝石鑑定士","建築士","弁護士","心理カウンセラー","探偵","探検家","教師","料理人","旅行ガイド","映像クリエイター","映像編集者","栄養士","森林ガイド","機械技師","歯科医師","気象予報士","法医学者","海上保安官","海洋学者","消防士","漁師","災害救助隊員","獣医師","環境コンサルタント","生物学者","画商","看護師","研究者","社会福祉士","科学者","秘書","経営者","編集者","美容師","翻訳者","考古学者","職人","臨床医","臨床心理士","臨床検査技師","臨床薬剤師","航空管制官","船長","芸術家","茶道・華道師範","証券アナリスト","警備員","警察官","販売員","起業家","農場経営者","農業従事者","通訳","運転手","遺伝カウンセラー","醸造家","鉄道運転士","銀行員","鑑定士","電気技師","音響エンジニア","AIエンジニア","CSR担当者","ITコンサルタント","QAエンジニア","SEOスペシャリスト","UX/UIデザイナー","YouTuber",
    ],
    'forbidden_jobs': ["システムエンジニア", "プログラマ"],
    'other_rules': ["年齢と性別から外れすぎない、珍しい職業を選択する。学生の年齢なら適合する学生名を選択する。"]
}

# -----------------------------
# 制約事項出力関数群
# -----------------------------
def get_name_restrictions():
    """
    名前制限に関する条件を整形した文字列として返す。
    禁止名字・名前、その他ルールを列挙します。
    """
    return f"""
- 以下の苗字は禁止: {', '.join(FORBIDDEN_NAMES['family_names'])}
- 以下の名前は禁止: {', '.join(FORBIDDEN_NAMES['given_names'])}
- {' '.join(FORBIDDEN_NAMES['other_rules'])}
"""

def get_job_restrictions():
    """
    職業制限に関する条件を整形した文字列として返す。
    許可職業、禁止職業、その他ルールを列挙します。
    """
    return f"""
- 選択可能な職業: {', '.join(JOBS['allowed_jobs'])}
- 禁止職業: {', '.join(JOBS['forbidden_jobs'])}
- {' '.join(JOBS['other_rules'])}
"""

# -----------------------------
# プロフィール生成用プロンプト
# -----------------------------
def get_profiles_prompt(profiles_input):
    """
    プロフィール生成プロンプトを返す関数。
    引数:
        profiles_input (list): ex) ["20歳男性", "30歳女性"] のような人物設定リスト
    戻り値:
        str: 生成に利用するプロンプト文字列(JSON形式での回答を要求)
    """
    name_restrictions = get_name_restrictions()
    job_restrictions = get_job_restrictions()
    return f"""
以下の条件で小説の登場人物のプロフィールを作成してください。
得意なことや、どんなことに喜びを感じるかなどポジティブな面を含めてください。
またその人物はどのようなところが「欠けて」いるのかを設定してください。物語を通して、その欠けた部分を満たしていく過程を描いていきます。
欠けた部分の例：「幼少期の受験失敗による学歴に強烈なコンプレックスがある」「親友に裏切られた経験から、人を信じることができなくなっている」など。
その人物の性格と来歴が深く関わっているように設計してください。
それぞれの人物について、以下の情報にまとめてください：
- 氏名（漢字とよみがな）
<!--important-->
氏名の制限事項：
{name_restrictions}
<!--important-->
- 職業
<!--important-->
職業の制限事項：
{job_restrictions}
<!--important-->
- 性格
- 来歴（生い立ちや経歴）

対象となる人物: {profiles_input}

回答は以下のJSON形式で返してください：
{{
    "profiles": [
        {{
            "name": "氏名",
            "job": "職業",
            "personality": "性格",
            "history": "来歴"
        }}
    ]
}}
"""

# -----------------------------
# 部分的なフィールド更新プロンプト
# -----------------------------
def get_partial_update_prompt(profile, changed_field, affected_fields):
    """
    特定フィールドを再生成するためのプロンプトを返す。
    引数:
        profile (dict): 現在のプロフィール辞書
        changed_field (str): 変更対象フィールド名("age","gender","name","job","personality","history")
        affected_fields (list): 変更時に同時に再生成すべきフィールド名一覧
    戻り値:
        str: JSON形式で変更点のみ返すことを促すプロンプト
    """
    age = profile.get("age", "")
    gender = profile.get("gender", "")
    name_ = profile.get("name", "")
    job = profile.get("job", "")
    personality = profile.get("personality", "")
    history = profile.get("history", "")

    fields_to_update = ", ".join(affected_fields)
    # 変更しないフィールドを特定
    all_fields = ["age", "gender", "name", "job", "personality", "history"]
    fields_to_keep = ", ".join([f for f in all_fields if f not in affected_fields])

    # フィールド毎の特別な指示
    special_instructions = ""
    if changed_field == "name":
        name_restrictions = get_name_restrictions()
        special_instructions = f"""
<!--important-->
名前の変更について:
- 現在の性別「{gender}」に合った名前を生成してください
- 性別は変更しないでください
- 職業、性格、来歴は変更しないでください
{name_restrictions}
<!--important-->
"""
    elif changed_field == "job":
        job_restrictions = get_job_restrictions()
        special_instructions = f"""
<!--important-->
職業の変更について:
- 意外性のある職業もチョイスしてください
- 年齢と性別は変更しないでください
{job_restrictions}
<!--important-->
"""
    elif changed_field == "history":
        # 来歴変更時は指定の年齢・性別・名前・職業を変えずに来歴を再生成
        special_instructions = f"""
<!--important-->
来歴の変更について:
- 年齢「{age}歳」、性別「{gender}」、名前「{name_}」、職業「{job}」に合った来歴を作り直してしてください
- 年齢、性別、名前、職業は変更しないでください
- 現在設定されている来歴は考慮せず、別の人生だったらという視点で別の来歴を作成してください
- 現在の職業に就くまでの経緯や、その人物の背景を具体的に描写してください
<!--important-->
"""
    elif changed_field == "age":
        # 年齢変更時には他条件を指定
        special_instructions = f"""
<!--important-->
年齢の変更について:
- 指定された年齢「{age}歳」を必ず使用してください
- 年齢を変更したり、ランダムに設定したりしないでください
- 指定された年齢に合った現実的な職業、性格、来歴を生成してください
<!--important-->
"""

    return f"""
以下は現在のプロフィールです。変更前のプロフィール:
年齢: {age}
性別: {gender}
名前: {name_}
職業: {job}
性格: {personality}
来歴: {history}

変更対象フィールド: {fields_to_update}
変更しないフィールド（現状維持）: {fields_to_keep}

{special_instructions}

<!--important-->
以下のフィールドは絶対に変更しないでください（現状維持）: {fields_to_keep}
<!--important-->

変更対象フィールドのみを再生成してください。

再生成ルール:
- 氏名（漢字とよみがな）（佐々木、鈴木、田中、佐藤は禁止。健太も禁止。）
- 職業は get_job_restrictions() で定義された制限に従う
- 性格
- 来歴
は説の登場人物として一貫した新しい情報を生成してください。
- 年齢は現在の年齢から±15歳の範囲内で設定してください。ただし、0歳未満や100歳以上にはならないようにしてください。
- 性別は「男性」または「女性」で設定してください。

結果は以下のJSON形式で返してください（変更したフィールドのみ含める）:
{{
    "updated_fields": {{
        "age": "新しい年齢（必要なら）",
        "gender": "新しい性別（必要なら）",
        "name": "新しい氏名（漢字とよみがな、必要なら）",
        "job": "新しい職業（必要なら）",
        "personality": "新しい性格（必要なら）",
        "history": "新しい来歴（必要なら）"
    }}
}}
変更対象でないフィールドはJSONに含めないでください。
"""

# -----------------------------
# 舞台設定提案用プロンプト
# -----------------------------
def get_scenarios_prompt(profiles):
    """
    与えられたキャラクタープロフィールから、
    3つの異なる小説の舞台シチュエーションをJSON形式で提案するプロンプトを返す。
    引数:
        profiles (list): 各人物の辞書({'age','gender','name','job','personality','history'})のリスト
    戻り値:
        str: JSON形式でシチュエーション(title,description)を3つ返すプロンプト
    """
    char_descriptions = []
    for p in profiles:
        char_descriptions.append(
            f"年齢:{p['age']}、性別:{p['gender']}、名前:{p['name']}、職業:{p['job']}、性格:{p['personality']}、来歴:{p['history']}"
        )
    char_str = "\n".join(char_descriptions)

    return f"""
以下は現在小説に登場するキャラクターのリストです：
{char_str}

上記のキャラクターたちが活躍する小説の舞台設定として、3つのなるシチュエーションを提案してください。
それぞれのシチュエーションは、以下の形式で記述してください：
- タイトル（小説として魅力的なもの。短くコセプチュアルなものや、長くラノベっぽいものもOK。小説のテイストに合わせて設定します。また、ジャンル、想定される読者層なども含める）
- 簡潔な説明（その舞台でどのような物語が展開できるかの概要）
<!--important--> - 見たことも、聞いたこともない、大きく奇抜な展開や意外な仕掛けのアイデアを必ず入れてください。そしてそれを【特別なポイント】項目として述べてください。

回答を以下のJSON形式で返してください:
{{
    "scenarios": [
        {{
            "title": "シチュエーション1のタイトル",
            "description": "シチュエーション1の説明",
            "special":"シチュエーション1の特別なポイント"
        }},
        {{
            "title": "シチュエーション2のタイトル",
            "description": "シチュエーション2の説明"
            "special":"シチュエーション2の特別なポイント"
        }},
        {{
            "title": "シチュエーション3のタイトル",
            "description": "シチュエーション3の説明"
            "special":"シチュエーション2の特別なポイント"
        }}
    ]
}}
"""

# -----------------------------
# シナリオ構成生成用プロンプト
# -----------------------------
def get_story_structure_prompt(scenario, profiles):
    """
    選択された舞台設定(scenario)とprofilesに基づいて「Save the Cat」構成のストーリー展開を提案するプロンプト。
    引数:
        scenario (dict): {"title":"...","description":"..."}
        profiles (list): キャラクタープロフィールリスト
    戻り値:
        str: JSON形式でストーリーの構成ビート（title, description）を返すプロンプト
    """
    char_lines = []
    for p in profiles:
        char_lines.append(
            f"・{p['name']}（{p['age']}歳, {p['gender']}）職業:{p['job']} 性格:{p['personality']} 来歴:{p['history']}"
        )
    char_summary = "\n".join(char_lines)

    # 「Save the Cat」ビートシート一覧を踏まえて構成を提示する
    return f"""
以下に与えられた舞台設定とキャラクターに基づき、「Save the Cat」のビートシート構成に沿った物語構成を提案してください。

舞台定: {scenario['title']}
説明: {scenario['description']}
キャラクター一覧:
{char_summary}

"Save the Cat"のビート一覧
1. Opening Image（オープニングイメージ）：物語の始まりを象徴するシーンで、主人公や世界の「変化前の状態」を提示し、エンディングとの対比を通じてテーマや成長を視的に強調する役割を持つ。
2. Theme Stated（テーマの提示）：物語の核心となるテーマや問題が序盤で示され、観客に潜在的に意識させ、クライマックスで再び浮かび上がる布石となる重要な瞬間。
3. Set-up（セットアップ）：物語の出発点として、主人公や主要キャラクターの特徴、欠点、成長の必要性を示し、物語の世界観やルール、伏線を明確に提示することで、主人公が乗り越えるべき目的と障害を設定し、観客に物語の方向性と興味を植え付ける重要な構成要素。
4. Catalyst（きっかけ）：主人公が日常から非日常へと引き込まれる瞬間であり、これまでの世界が壊れる予兆と共に、未知の世界への扉が叩かれる重要なトリガー。
5. Debate（葛藤）：主人公が「未知の世界」や「変化」に対する恐れや迷いを抱き、行動を躊躇することで、観客に共感や緊張感を生み出すシークエンス。ここでは主人公の内面的な葛藤や抵抗が描かれ、物語の転換点へのエネルギーを蓄える。観客はこの葛藤を通じて主人公の選択の重みや成長の必要性を感じ取り、次の行動が物語全体においてどれほど重要かを理解するようになる���この段階が強調されること、後の決断や行動に対するカタルシスが最大化される。
6. Break Into Two（行動への移行）：主人公が迷いや葛藤を乗り越え、自らの意志で日常を離れ、未知の世界や新たな挑戦へ踏み出す「引き返せない瞬間」。ここでは、物語の方向性が決定的に変わり、主人公がもはや過去の自分や安全な日常には戻れない状況に置かれる。重要なのは、外的要因に流されるのではなく、主人公自身の「選択」と「決意」が描かれることで、観客に物語の緊張感や高揚感を与え、物語を次の段階へと劇的に加速させる。この瞬間が強固であればあるほど、主人公の成長や試練が観客にとって説得力を持ち、物語全体のカタルシスへつながる礎となる。
7. B Story（サブストーリー）：サブプロットは物語のテーマを別角度から掘り下げ、メインプロットを補強しつつ、物語に対比や緩急を生み出す重要な要素。新たな登場人物や視点を導入することで、主人公や物語の核心に新しい気づきや成長のきっかけを与え、最終的にAストーリーと交差・融合することで物語全体に深みと統一感をもたらす。
8. Fun and Games（楽しい試練）：物語の核となるアクションや対立が展開され、観客が「期待する見せ場」を楽しめるシーン群であり、物語のトーンやジャンルを最も鮮明に表現し、物語世界への没入感を最大化する重要なパート。
9. Midpoint（中間点）：ミッド・ポイントは物語の中盤に位置し、主人公が「見せかけの勝利」または「見せかけの敗北」に直面することで、物語の方向性が大きく転換する瞬間。ここで物語のテンションが一度最高潮に達し、外的・内的な危機や挑戦のレベルが一気に引き上げられる。もし「見せかけの勝利」であれば、主人公は目的を達成したかのように錯覚し油断が生じるが、実は問題の核心は解決されておらず、後にその代償を払うことになる。一方、「見せかけの敗北」なら、これ以上ない絶望に直面し、後半の成長や逆転への布石となる。この瞬間は物語後半の「全てを失って」の場面と対比され、主人公の真の変化や最終的な勝利への道筋を示唆するターニングポイントとして機能する。
10. Bad Guys Close In（敵の襲来・悪化）：ミッドポイント後、主人公の見せかけの勝利や状況の安定が崩れ、敵対者や障害が勢いを強して総攻撃を仕掛けてくるパート。人間の敵に限らず、内の葛藤や環境、状況の悪化なども含まれ、主人公の目的達成がより困難になることで物語の緊張感が高まる。
11. All Is Lost（すべて失われたように見える瞬間）：物語の中盤で主人公が象徴的または実質的な「死」に直面し、過去の価値観や限界が崩壊することで、新しい自己や界観へとつながる道が開かれる転換点。ここでの絶望や喪失は、主人公を更なる成長へと導く触媒となり、物語全体の再構築とクライマックスへの準備を加速させる。
12. Dark Night of the Soul（魂の暗夜）：主人公が象徴的な「死」を経験した後、絶望の中で心の奥底に向き合い、自分の弱さや限界、過去の価値観と徹底的に対峙する瞬間。ここでの内面的な崩壊と再生のプロセスを経て、主人公は真の解決法や新しい自己を見出し、最終決戦へ向けた強い意志と覚悟を手に入れる。物語の中で最も静かでありながら、感情的には最も重要な転換点。
13. Break Into Three（最終行動開始）：主人公が絶望を乗り越え、Aストーリー（メインプロット）とBストーリー（サブプロット）の融合によって核心的な「解決策」を見つけ出し、成長した自分の意志と新たなキル・知恵を武器に、物語のクライマックスへ向けて明確な目的と決意を持って進み始める転換点。ここで得られた気づきやヒントが、物語全体のテーマを象徴し、最終的な対決に必要な力や答えを提示する。
14. Finale（フィナーレ）：主人公が物語を通じて学んだ教訓や成長を活かし、直すべき欠点を克服して最終的な問題に立ち向かい、メインプロットとサブプロットが一つに収束して勝利を収めるクライマックスの場面。ここですべての伏線が回収され、物語のテーマが力強く提示されると同時に、主人公の変化が明確に示され、観客に感動と満足感をもたらす締めくくりとなる。
15. Final Image（最終イメージ）：物語の締めくくりとして、オープニングイメージと対比することで主人公や世界の「変化」を明確に示すシーン。ここでは、物語を通じて主人公が克服した欠点や成長、達成した成果が視覚的に描かれ、観客にテーマのメッセージを印象づける。例えば、オープニングで孤独だった主人公が、ファイナルでは仲間に囲まれてい��、あるいは荒廃していた世界が平和に変わっているとい���た具合に、最初と最後の対比が物語全体の意味を強調する。


各ビートに以下のJSON形式で応答してください:
{{
  "story_beats": [
    {{
      "beat_number": 1,
      "beat_name": "ビート名",
      "content": "このビートでの展開・内容"
    }}
  ]
}}
"""

# -----------------------------
# アウトライン生成用プロンプト
# -----------------------------
def get_outline_prompt(scenario, profiles, structure):
    """
    決定済みのキャラクター、舞台設定、シナリオ構成をもとに、詳細なアウトラインをJSONで生成するプロンプト。
    条件に沿って章立てやセリフ、伏線、謎などを含む。
    引数:
        scenario (dict): {"title":"...","description":"..."}
        profiles (list): キャラクタープロフィール辞書
        structure (list): ビートシート構成リスト
    戻り値:
        str: JSON形式のアウトライン出力プロンプト
    """
    char_desc = []
    for p in profiles:
        char_desc.append(f"{p['name']}（{p['age']}歳, {p['gender']}）: {p['job']}、性格: {p['personality']}、来歴: {p['history']}")
    characters_text = "\n".join(char_desc)

    structure_text = ""
    for beat in structure:
        beat_name = beat.get('beat_name', beat.get('title', ''))
        beat_content = beat.get('content', beat.get('description', ''))
        structure_text += f"・{beat_name}: {beat_content}\n"

    return f"""
これまでに決定したキャラクター、舞台設定、シナリオ構成を元に、小説のアウトラインを出力してください。謎や、驚くような意外な展開、謎となる伏線とその回収などを含めます。

【舞台設定】
タイトル: {scenario['title']}
説明: {scenario['description']}

【登場人物一】
{characters_text}

【シナリオ構成 (Save the Catビート)】
{structure_text}

上記を踏まえ、以下の条件を満たす詳細なアウトラインをJSON形式で返してください。

条件:
- タイトルは物語に相しい具体的なものにす（"仮のタイトル"は禁止）
- 登場人物の詳細は具体的かつ一貫性を保つ
- インデックスは「第X章 - ○○」の形式で章立てし、物語をエンディングまで書ききる
- 第一章では、登場人物のキャラクターを印象付ける、象徴的な出来事を丁寧に描き、読者の興味や共感を最大限に得することを重要視する。
- 第一章では、そんな風変わりなキャラクターがどんな物語を紡いでいくのか、ワクワクするという読後感を醸成する。
- 各章ごとに具体的なアウトラインを提示する（テンポよく、驚き感心など読者をいい意味で裏切る筋書きを意識すること）
- 各章にはハイライトとなるシーン、セリフ、物語が盛り上がる要素、クリフハンガー、回収される伏線を記載
- 全てを最後まで描き、物語が完結すること
- 文章中にメタな表現は使わないこと。例：「この後意外な展開になるのだが、今はまだ誰も知る由もなかった」「物語は◯◯な方向へ」などは表現として稚拙なので禁止。
- セリフや会話は誰がしているのか、わかるようにする。
- キャラクターの性格などから、誰が発言しているかかるように、キャラクタに口癖や話し方に特徴を持たせると良い（極端にしないこと）

回答フォーマット:
{{
  "outline": {{
    "title": "物語の最終的なタイトル",
    "characters": "主要登場人物と特徴をまとめたテキスト",
    "index": [
      "第1章 - ...",
      "第2章 - ...",
      "...最後の章まで"
    ],
    "chapters": [
      {{
        "title": "第1章：...章タイトル...（淡白な表現ではなく、読者を惹きつけるようなイトルを指定。抽象的なものではなく、物語の内容に言及したテキストにする。）",
        "summary": "この章での出来事や物語の進行要約",
        "highlights": [
          "重要なシーンやセリフ（映画のトレイラーのやハイライトとして使われそうな象徴的なシーンや発言）",
          "物語が盛り上がるポイント（一気に深まる謎、一見事件と無関係だと思われていたが一気に回収される伏線など）"
        ]
      }},
      "...各章同様にできるだけ詳細に記述..."
    ]
  }}
}}
"""
